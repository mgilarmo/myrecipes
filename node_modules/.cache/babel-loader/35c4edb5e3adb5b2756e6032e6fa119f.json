{"ast":null,"code":"var _jsxFileName = \"/Users/matthewgilarmo/Projects/myrecipes/src/components/forms/WizardFormSecondPage.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport validate from './validate';\n\nclass WizardFormSecondPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cats: [{\n        name: \"\"\n      }]\n    };\n\n    this.handleChange = e => {\n      if ([\"name\"].includes(e.target.className)) {\n        let cats = [...this.state.cats];\n        cats[e.target.dataset.id][e.target.className] = e.target.value.toUpperCase();\n        this.setState({\n          cats\n        });\n      } else {\n        this.setState({\n          [e.target.name]: e.target.value.toUpperCase()\n        });\n      }\n    };\n\n    this.addIngr = e => {\n      this.setState(prevState => ({\n        cats: [...prevState.cats, {\n          name: \"\"\n        }]\n      }));\n    };\n  }\n\n  render() {\n    let cats = this.state.cats;\n    return React.createElement(\"form\", {\n      onSubmit: e => e.preventDefault,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(\"label\", {\n      onClick: this.addIngr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Add another ingredient\"), cats.map((val, idx) => {\n      let catId = \"cat-\".concat(idx);\n      return React.createElement(\"div\", {\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: catId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"\".concat(idx + 1, \")\")), React.createElement(\"input\", {\n        type: \"text\",\n        name: catId,\n        \"data-id\": idx,\n        id: catId,\n        value: cats[idx].name,\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }));\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default reduxForm({\n  form: 'recipeWizard',\n  //Form name is same\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true,\n  // <------ unregister fields on unmount\n  validate\n})(WizardFormSecondPage);","map":{"version":3,"sources":["/Users/matthewgilarmo/Projects/myrecipes/src/components/forms/WizardFormSecondPage.js"],"names":["React","Field","reduxForm","validate","WizardFormSecondPage","Component","state","cats","name","handleChange","e","includes","target","className","dataset","id","value","toUpperCase","setState","addIngr","prevState","render","preventDefault","map","val","idx","catId","form","destroyOnUnmount","forceUnregisterOnUnmount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport validate from './validate';\n\n\nclass WizardFormSecondPage extends React.Component {\n\n  state = {\n    cats: [{name:\"\"}]\n  }\n  \n  handleChange = (e) => {\n    if ([\"name\"].includes(e.target.className) ) {\n      let cats = [...this.state.cats]\n      cats[e.target.dataset.id][e.target.className] = e.target.value.toUpperCase()\n      this.setState({ cats })\n    } else {\n      this.setState({ [e.target.name]: e.target.value.toUpperCase() })\n    }\n  }\n  \n  addIngr = (e) => {\n    this.setState((prevState) => ({\n      cats: [...prevState.cats, {name:\"\"}],\n    }));\n  }\n    \n  render() {\n    let {cats} = this.state\n    return (\n      <form onSubmit={e => e.preventDefault} onChange={this.handleChange} >\n        <label htmlFor=\"name\">Ingredients</label> \n        <label onClick={this.addIngr}>Add another ingredient</label>\n        {\n          cats.map((val, idx)=> {\n            let catId = `cat-${idx}`\n            return (\n              <div key={idx}>\n                <label htmlFor={catId}>{`${idx + 1})`}</label>\n                <input\n                  type=\"text\"\n                  name={catId}\n                  data-id={idx}\n                  id={catId}\n                  value={cats[idx].name} \n                  className=\"name\"\n                />\n              </div>\n            )\n          })\n        }\n        <input type=\"submit\" value=\"Submit\" /> \n      </form>\n    )\n  }\n}\n\nexport default reduxForm({\n  form: 'recipeWizard', //Form name is same\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true, // <------ unregister fields on unmount\n  validate\n})(WizardFormSecondPage)"]},"metadata":{},"sourceType":"module"}