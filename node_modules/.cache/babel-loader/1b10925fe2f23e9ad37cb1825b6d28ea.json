{"ast":null,"code":"var _jsxFileName = \"/Users/matthewgilarmo/Projects/myrecipes/src/components/forms/WizardFormSecondPage.js\";\nimport React from 'react';\nimport { Field, FormSection, reduxForm } from 'redux-form';\nimport renderInputList from './renderInputList';\nimport validate from './validate';\n\nclass WizardFormSecondPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingreds: [{\n        name: \"\"\n      }]\n    };\n\n    this.handleChange = e => {\n      if ([\"name\"].includes(e.target.className)) {\n        let ingreds = [...this.state.ingreds];\n        ingreds[e.target.dataset.id][e.target.className] = e.target.value;\n        this.setState({\n          ingreds\n        });\n      } else {\n        this.setState({\n          [e.target.name]: e.target.value\n        });\n      }\n    };\n\n    this.addIngr = e => {\n      this.setState(prevState => ({\n        ingreds: [...prevState.ingreds, {\n          name: \"\"\n        }]\n      }));\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wizard-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(\"label\", {\n      className: \"add-input-field\",\n      onClick: this.addIngr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), \"Add another ingredient\")), React.createElement(FormSection, {\n      name: \"ingredients\",\n      componnet: \"div\",\n      className: \"wizard-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.state.ingreds.map(i => {\n      return React.createElement(Field, {\n        component: renderInputList,\n        label: \"\".concat(i + 1, \")\"),\n        type: \"text\",\n        key: i,\n        \"data-id\": i,\n        value: this.state.ingreds[i].name,\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"previous\",\n      onClick: this.props.previousPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Previous\"), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Next\")));\n  }\n\n}\n\nexport default reduxForm({\n  form: 'recipeWizard',\n  //Form name is same\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true,\n  // <------ unregister fields on unmount\n  validate\n})(WizardFormSecondPage);","map":{"version":3,"sources":["/Users/matthewgilarmo/Projects/myrecipes/src/components/forms/WizardFormSecondPage.js"],"names":["React","Field","FormSection","reduxForm","renderInputList","validate","WizardFormSecondPage","Component","state","ingreds","name","handleChange","e","includes","target","className","dataset","id","value","setState","addIngr","prevState","render","props","handleSubmit","map","i","previousPage","form","destroyOnUnmount","forceUnregisterOnUnmount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, FormSection, reduxForm } from 'redux-form';\nimport renderInputList from './renderInputList';\nimport validate from './validate';\n\n\nclass WizardFormSecondPage extends React.Component {\n\n  state = {\n    ingreds: [{name:\"\"}]\n  }\n  \n  handleChange = (e) => {\n    if ([\"name\"].includes(e.target.className) ) {\n      let ingreds = [...this.state.ingreds]\n      ingreds[e.target.dataset.id][e.target.className] = e.target.value\n      this.setState({ ingreds })\n    } else {\n      this.setState({ [e.target.name]: e.target.value })\n    }\n  }\n  \n  addIngr = (e) => {\n    this.setState((prevState) => ({\n      ingreds: [...prevState.ingreds, {name:\"\"}],\n    }));\n  }\n    \n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit} onChange={this.handleChange} >\n        <div className=\"wizard-title\">\n          <label>Ingredients</label> \n          <label className=\"add-input-field\" onClick={this.addIngr}>\n            <i className=\"fa fa-plus\" />\n            Add another ingredient\n          </label>\n        </div>\n        <FormSection name=\"ingredients\" componnet=\"div\" className=\"wizard-list\">\n          {\n            this.state.ingreds.map((i)=> {\n              return (\n                <Field\n                  component={renderInputList}\n                  label={`${i + 1})`}\n                  type=\"text\"\n                  key={i}\n                  data-id={i}\n                  value={this.state.ingreds[i].name} \n                  className=\"name\"\n                />\n              );\n            })\n          }\n        </FormSection>\n        <div>\n          <button type=\"button\" className=\"previous\" onClick={this.props.previousPage}>\n            Previous\n          </button>\n          <button type=\"submit\" className=\"next\">\n            Next\n          </button>\n        </div>\n    </form>\n    )\n  }\n}\n\nexport default reduxForm({\n  form: 'recipeWizard', //Form name is same\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true, // <------ unregister fields on unmount\n  validate\n})(WizardFormSecondPage)"]},"metadata":{},"sourceType":"module"}