{"ast":null,"code":"import youtube from '../apis/youtube';\nimport { FETCH_VIDEOS, GENERIC, SEARCHING_RECIPES, SELECT_RECIPE_CARD, SIGN_IN, SIGN_OUT, TOGGLE_BOOLEAN } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const searchingRecipes = term => {\n  return {\n    type: SEARCHING_RECIPES,\n    payload: term\n  };\n};\nexport const toggleBoolean = stateToToggle => (dispatch, getState) => {\n  const newState = getState().ui[stateToToggle] ? false : true;\n\n  if (stateToToggle === 'showAllRecipes') {\n    dispatch({\n      type: GENERIC,\n      payload: {\n        term: '',\n        selectedRecipeId: '',\n        selectedRecipeName: '',\n        videos: []\n      }\n    });\n  }\n\n  return dispatch({\n    type: TOGGLE_BOOLEAN,\n    payload: {\n      state: [stateToToggle],\n      stateChange: newState\n    }\n  });\n};\nexport const showRecipeAndVideos = (id, name) => dispatch => {\n  dispatch(selectRecipeCard(id, name));\n  dispatch(fetchYouTubeVideos(name));\n};\nexport const selectRecipeCard = (id, name) => {\n  return {\n    type: SELECT_RECIPE_CARD,\n    payload: {\n      id,\n      name\n    }\n  };\n};\nexport const fetchYouTubeVideos = name => async dispatch => {\n  const response = await youtube.get('/search', {\n    params: {\n      q: name\n    }\n  });\n  return dispatch({\n    type: FETCH_VIDEOS,\n    payload: response.data.items\n  });\n}; // USING PROMISE WITH .THEN()\n// export const fetchYouTubeVideos = (name) => (dispatch) => {\n//   return fetch(`https://www.googleapis.com/youtube/v3/search?q=${name}&part=snippet&maxResults=5&key=AIzaSyD6Stv0Gvx3yjZCG34Jc4PcKL2FCbkLIkw`)\n//   .then((res) => {\n//     return res.json()\n//   })\n//   .then((res) => {\n//     console.log(res)\n//   })\n//   .catch((err) => {\n//     console.log(err)\n//   })\n// }","map":{"version":3,"sources":["/Users/matthewgilarmo/Projects/myrecipes/client/src/actions/actions.js"],"names":["youtube","FETCH_VIDEOS","GENERIC","SEARCHING_RECIPES","SELECT_RECIPE_CARD","SIGN_IN","SIGN_OUT","TOGGLE_BOOLEAN","signIn","userId","type","payload","signOut","searchingRecipes","term","toggleBoolean","stateToToggle","dispatch","getState","newState","ui","selectedRecipeId","selectedRecipeName","videos","state","stateChange","showRecipeAndVideos","id","name","selectRecipeCard","fetchYouTubeVideos","response","get","params","q","data","items"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AAEA,SACEC,YADF,EAEEC,OAFF,EAGEC,iBAHF,EAIEC,kBAJF,EAKEC,OALF,EAMEC,QANF,EAOEC,cAPF,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEL,OADD;AAELM,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMO,gBAAgB,GAAIC,IAAD,IAAU;AACxC,SAAO;AACLJ,IAAAA,IAAI,EAAEP,iBADD;AAELQ,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,aAAa,GAAIC,aAAD,IAAmB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtE,QAAMC,QAAQ,GAAGD,QAAQ,GAAGE,EAAX,CAAcJ,aAAd,IAA+B,KAA/B,GAAuC,IAAxD;;AAEA,MAAIA,aAAa,KAAK,gBAAtB,EAAwC;AACtCC,IAAAA,QAAQ,CAAC;AACPP,MAAAA,IAAI,EAAER,OADC;AAEPS,MAAAA,OAAO,EAAE;AACPG,QAAAA,IAAI,EAAE,EADC;AAEPO,QAAAA,gBAAgB,EAAE,EAFX;AAGPC,QAAAA,kBAAkB,EAAE,EAHb;AAIPC,QAAAA,MAAM,EAAE;AAJD;AAFF,KAAD,CAAR;AASD;;AACD,SAAON,QAAQ,CAAC;AACdP,IAAAA,IAAI,EAAEH,cADQ;AAEdI,IAAAA,OAAO,EAAE;AACPa,MAAAA,KAAK,EAAE,CAACR,aAAD,CADA;AAEPS,MAAAA,WAAW,EAAEN;AAFN;AAFK,GAAD,CAAf;AAOD,CArBM;AAuBP,OAAO,MAAMO,mBAAmB,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAeX,QAAD,IAAc;AAC7DA,EAAAA,QAAQ,CAACY,gBAAgB,CAACF,EAAD,EAAKC,IAAL,CAAjB,CAAR;AACAX,EAAAA,QAAQ,CAACa,kBAAkB,CAACF,IAAD,CAAnB,CAAR;AACD,CAHM;AAKP,OAAO,MAAMC,gBAAgB,GAAG,CAACF,EAAD,EAAKC,IAAL,KAAc;AAC5C,SAAO;AACLlB,IAAAA,IAAI,EAAEN,kBADD;AAELO,IAAAA,OAAO,EAAE;AAACgB,MAAAA,EAAD;AAAKC,MAAAA;AAAL;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAME,kBAAkB,GAAIF,IAAD,IAAU,MAAOX,QAAP,IAAoB;AAC9D,QAAMc,QAAQ,GAAG,MAAM/B,OAAO,CAACgC,GAAR,CACrB,SADqB,EACV;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAEN;AADG;AADC,GADU,CAAvB;AAOA,SAAOX,QAAQ,CAAC;AAACP,IAAAA,IAAI,EAAET,YAAP;AAAqBU,IAAAA,OAAO,EAAEoB,QAAQ,CAACI,IAAT,CAAcC;AAA5C,GAAD,CAAf;AACD,CATM,C,CAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import youtube from '../apis/youtube';\n\nimport {\n  FETCH_VIDEOS,\n  GENERIC,\n  SEARCHING_RECIPES, \n  SELECT_RECIPE_CARD,\n  SIGN_IN, \n  SIGN_OUT, \n  TOGGLE_BOOLEAN, \n} from './types';\n\nexport const signIn = (userId) => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT,\n  };\n};\n\nexport const searchingRecipes = (term) => {\n  return {\n    type: SEARCHING_RECIPES,\n    payload: term\n  };\n};\n\nexport const toggleBoolean = (stateToToggle) => (dispatch, getState) => {\n  const newState = getState().ui[stateToToggle] ? false : true;\n\n  if (stateToToggle === 'showAllRecipes') {\n    dispatch({\n      type: GENERIC,\n      payload: {\n        term: '',\n        selectedRecipeId: '',\n        selectedRecipeName: '',\n        videos: []\n      }\n    })\n  }\n  return dispatch({\n    type: TOGGLE_BOOLEAN, \n    payload: {\n      state: [stateToToggle], \n      stateChange: newState\n    }\n  })\n};\n\nexport const showRecipeAndVideos = (id, name) => (dispatch) => {\n  dispatch(selectRecipeCard(id, name));\n  dispatch(fetchYouTubeVideos(name));\n};\n\nexport const selectRecipeCard = (id, name) => {\n  return {\n    type: SELECT_RECIPE_CARD,\n    payload: {id, name}\n  };\n};\n\nexport const fetchYouTubeVideos = (name) => async (dispatch) => {\n  const response = await youtube.get(\n    '/search', {\n      params: {\n        q: name\n      }\n    }\n  );\n  return dispatch({type: FETCH_VIDEOS, payload: response.data.items});\n};\n\n\n// USING PROMISE WITH .THEN()\n// export const fetchYouTubeVideos = (name) => (dispatch) => {\n//   return fetch(`https://www.googleapis.com/youtube/v3/search?q=${name}&part=snippet&maxResults=5&key=AIzaSyD6Stv0Gvx3yjZCG34Jc4PcKL2FCbkLIkw`)\n//   .then((res) => {\n//     return res.json()\n//   })\n//   .then((res) => {\n//     console.log(res)\n//   })\n//   .catch((err) => {\n//     console.log(err)\n//   })\n// }"]},"metadata":{},"sourceType":"module"}